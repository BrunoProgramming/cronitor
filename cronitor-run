#!/usr/bin/env python
#
# Author:: Joshua J. Berry <des@condordes.net>
# Copyright:: Copyright 2013-2019, Joshua J. Berry
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# NOTE: This code tries to be compatible with both Python 2 and 3.

import optparse
import subprocess
import pty
import os
import sys
import socket
import traceback

# Python 2/3 shims.
if sys.version_info >= (3,):
    from urllib.request import Request, HTTPSHandler, \
        HTTPBasicAuthHandler, HTTPPasswordMgrWithDefaultRealm, \
        build_opener, install_opener
    from urllib.error import HTTPError, URLError
    import ssl
    pairs = lambda d: d.items()
    encode = lambda s: bytes(s, 'utf-8')
else:
    from urllib2 import Request, HTTPError, URLError, HTTPSHandler, \
        HTTPBasicAuthHandler, HTTPPasswordMgrWithDefaultRealm, \
        build_opener, install_opener
    from urllib2 import ssl
    pairs = lambda d: d.iteritems()
    encode = lambda s: s


usage = "Usage: cronitor-run [options] -j job-name -- command ..."
descr = """Runs a command, capturing its output, environment and return code,
and reports the outcome to a Cronitor server, specified using the -p option or
the CRONITOR_URL environment variable. """

optp = optparse.OptionParser(usage=usage, description=descr)
optp.add_option("-j", "--job", dest="job", metavar="NAME", default=None,
                help="The name of the job we are running [required]")
optp.add_option("-p", "--post-to", dest="post_url", metavar="URL",
                default=os.environ.get('CRONITOR_URL', None),
                help="HTTP URL of the cronitor-server")
optp.add_option('-q', '--quiet', dest='quiet', action='store_true',
                default=False, help="Don't echo the command's output to stdout")
optp.add_option("-U", "--user", dest="user", metavar="USERNAME",
                default=os.environ.get('CRONITOR_USER', None),
                help="""The username to use for authentication
                (can also be set via the CRONITOR_USER environment variable)""")
optp.add_option("-P", "--password", dest="password", metavar="PASSWORD",
                default=os.environ.get('CRONITOR_PASSWORD', None),
                help="""The password to use for authentication
                (can also be set via the CRONITOR_PASSWORD environment variable)""")
opts, args = optp.parse_args()

if not opts.post_url:
    sys.stderr.write("No post URL specified; set CRONITOR_URL or use -p\n")
    sys.exit(1)
if not opts.job:
    sys.stderr.write("No job name specified; set with -j\n")
    sys.exit(1)

submit_url = opts.post_url
if not submit_url.endswith("/"): submit_url += "/"
submit_url += "submit/" + opts.job

auth = HTTPBasicAuthHandler(HTTPPasswordMgrWithDefaultRealm())
if opts.user and opts.password:
    auth.add_password(realm=None, uri=submit_url,
                      user=opts.user, passwd=opts.password)
opener = build_opener(HTTPSHandler(context=ssl.create_default_context()), auth)

# Capture and report on the environment
meta = {
    'Directory': os.getcwd(),
    'Command': " ".join(args),
    'Host': socket.gethostname(),
}
for k, v in pairs(os.environ):
    meta['ENV.%s' % k] = v

lines = []
try:
    # Control the child process with a TTY so the child process will use line
    # buffering for its output (and stdout/stderr won't get interleaved in weird
    # ways)
    read_fd, write_fd = pty.openpty()
    read_file = os.fdopen(read_fd)

    proc = subprocess.Popen(args, stdin=None, stdout=write_fd,
                            stderr=subprocess.STDOUT, close_fds=True,
                            shell=False)

    os.fdopen(write_fd).close()
    try:
        for line in read_file:
            if not opts.quiet: print(line.rstrip('\n'))
            lines.append(line)
    except IOError:
        # We're on Linux, and the child just closed its terminal
        pass

    rc = proc.wait()

except:
    rc = -1
    err = [
        "\n\n\n***** CRONITOR FAILED:\n\n",
        traceback.format_exc(),
        "\n"
        ]
    lines += err
    sys.stderr.write(''.join(err))

meta['Return-Code'] = str(rc)

data = "\n".join(["%s: %s" % (k, v) for k, v in pairs(meta)])
data += "\n\n"
data += ''.join(lines)

def oops(err):
    sys.stderr.write('\ncronitor-run: Failed to submit job log to server\n')
    sys.stderr.write(err)
    sys.stderr.write('\n')
    if opts.quiet:
        sys.stderr.write('\n----- Job output and metadata follows -----\n\n')
        sys.stderr.write(data)
        sys.stderr.write('\n')

try:
    res = opener.open(Request(submit_url, data=encode(data)))
    if res.getcode() != 200:
        raise res.getcode()

except HTTPError as e:
    rc = -1
    oops('%s: HTTP %d: %s\n' % (submit_url, e.code, e.reason))
except URLError as e:
    rc = -1
    oops('%s: %s' % (submit_url, e.reason))
except:
    rc = -1
    oops(traceback.format_exc())

sys.exit(rc)
